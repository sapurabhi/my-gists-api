name: CI/CD → Build Docker and Deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push-image:
    name: CI – Build, Test, Push to ECR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and run tests
        run: mvn clean install -DskipDockerBuild

      - name: Set Docker Image Tag
        id: set_image_tag
        run: |
          IMAGE_TAG="${{ github.sha }}"
          echo "Generated Image Tag: $IMAGE_TAG"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "$IMAGE_TAG" > image-tag.txt

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.ACTIONS_ECR_PUSH_ROLE_NAME }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR repository URL
        id: get-ecr-url
        run: |
          ECR_REPO_URL=$(aws ecr describe-repositories \
            --repository-names simple-gists-api-gists-api \
            --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_ENV

      - name: Build and Tag Docker Image
        run: |
          docker build -t "${{ env.ECR_REPO_URL }}:${{ steps.set_image_tag.outputs.image_tag }}" .
          docker tag "${{ env.ECR_REPO_URL }}:${{ steps.set_image_tag.outputs.image_tag }}" "${{ env.ECR_REPO_URL }}:latest"

      - name: Push Docker Image to ECR
        run: |
          docker push "${{ env.ECR_REPO_URL }}:${{ steps.set_image_tag.outputs.image_tag }}"
          docker push "${{ env.ECR_REPO_URL }}:latest"

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag-artifact
          path: image-tag.txt

  deploy:
    name: CD – Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push-image
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag-artifact
          path: ./image-tag-artifact

      - name: Read image tag from file
        id: read_tag
        run: |
          IMAGE_TAG=$(cat ./image-tag-artifact/image-tag.txt)
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.ACTIONS_ECR_PUSH_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up kubectl for EKS
        uses: aws-actions/amazon-eks-setup-kubectl@v1
        with:
          cluster-name: ${{ vars.EKS_CLUSTER_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.14.0'

      - name: Get ECR repository URL
        id: get-ecr-url
        run: |
          ECR_REPO_URL=$(aws ecr describe-repositories \
            --repository-names simple-gists-api-gists-api \
            --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_ENV

      - name: Deploy to EKS using Helm
        env:
          ECR_REPO_URL: ${{ env.ECR_REPO_URL }}
          IMAGE_TAG: ${{ steps.read_tag.outputs.image_tag }}
        run: |
          helm upgrade --install simple-gists-api-release ./helm/simple-gists-api \
            --namespace default \
            --create-namespace \
            --values helm/simple-gists-api/values-prod.yaml \
            --set image.repository=$ECR_REPO_URL \
            --set image.tag=$IMAGE_TAG \
            --atomic

      - name: Wait for LoadBalancer IP
        id: lb_status
        run: |
          echo "Waiting for LoadBalancer..."
          for i in $(seq 1 120); do
            LB_HOSTNAME=$(kubectl get svc simple-gists-api-release -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$LB_HOSTNAME" ]; then
              echo "lb_url=$LB_HOSTNAME" >> $GITHUB_OUTPUT
              break
            fi
            sleep 5
          done

      - name: Verify deployment
        run: |
          if [ -n "${{ steps.lb_status.outputs.lb_url }}" ]; then
            echo "Checking app health at: http://${{ steps.lb_status.outputs.lb_url }}/health"
            curl --fail --retry 10 --retry-delay 5 http://${{ steps.lb_status.outputs.lb_url }}/health
          else
            echo "LoadBalancer URL not available."
            exit 1
          fi

